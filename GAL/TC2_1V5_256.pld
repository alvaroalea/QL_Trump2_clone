GAL16V8
TrumCard3

/DSL A19 A18 A17 A16 A15 RST A14 A13 GND
MUX DSMC P13 CLKCT MA8 P16 /FDCCS /U17CS /ROMCS VCC

FDCCS = DSL * /A19 * /A18 * /A17 * A16 * A15 * A14 * /A13  ; 8Kb of I/O on 0x1C000-0x1DFFF
U17CS = DSL * /A19 * /A18 * /A17 * A16 * A15 * A14 *  A13  ; 8Kb of I/O on 0x1E000-0x1FFFF

; ROM is paged on 0x10000-0x17FFF (32Kb) alwais or at "expansion area 0xC0000-0xC7FFF" if P13=0
; 0xC0000 is the only address that JM ROM recognize as hardware expansion
ROMCS = DSL * /A19 * /A18 * /A17 *  A16 * /A15
      + DSL *  A19 *  A18 * /A17 * /A16 * /A15 * /P13

; Disable the 32Kb of ROM, the 16Kb of I/O, 256Kb of ram and the second copy of ROM when pagged.
DSMC  = DSL * /A19 * /A18 * /A17 * A16 * /A15
      + DSL * /A19 * /A18 * /A17 * A16 *  A15 * A14

      + DSL * /A19 *  A18

      + DSL *  A19 *  A18 * /A17 * /A16 * /A15 * /P13

; Really only used on dram memory on original Trump Card, not tested.
CLKCT = DSL  ; this is a NOT because defined /DSL as input.
/MA8 = A17 * MUX + A16 * /MUX

; And the magic:
/P16 = DSL * /A19 * /A18 * /A17 *  A16 * /A15 * /A14
     + RST * /P16

/P13  = DSL * /A19 * /A18 * /A17 * /A16 * A15 * A14 * P16
       +   A19 * RST * /P13
       +   A18 * RST * /P13
       +   A17 * RST * /P13
       +  /A16 * RST * /P13
       +   A15 * RST * /P13
       +  /DSL * RST * /P13

; The trick:
; Mechanism is described here: https://github.com/mamedev/mame/blob/master/src/mame/sinclair/ql.cpp

; We have a "Asyncronous Finite State Machine" using P13 and P16
; It's Asyncronous because do not use the clock input, neither the registered part of the GAL16V8, instead use two simple RS flipflop.
; the generic ecuation for a RS flipflop is  /Q = R + /S * /Q
; also note that RST is active low, so /S is RST
;
; STATE 0 - P13 = 1, P16 = 1 - Boot State after reset, 768Kb of RAM
;  -> to S1 (reset P13) P16=1 & 68K read position of memory over 0xC8nnnn (that is after ROM do initial RAM count and search for hardware)
;
; STATE 1 - P13 = 0; P16 = 1 - Rom in 0xC0000 place
;  -> to S3 (reset P16) when 68K read 0xCnnnn position of memory (on jump to the final ROM position)
;  -> to S0 (set P16, set P13) on reset
;
; STATE 3 - P13 = 0; P16 = 0 - 768Kb of RAM, normal position, and Initial State?, depend on a good Reset Signal.
;  -> to S0 (set P16, set P13) on reset
;
; /P13 indicate ROM in 0xC0000 (when 0), I'm aware that the explanation and the equations do not match, but I'm not fully understand the mechanism
;
; P16 is latch that avoid P13 to be reset (when = 0), that is put ROM again in place of RAM.
; it reset with reading of 0xC0000 an set with QL reset



DESCRIPTION:
Paging mechanism for Trump Card Disk Interface of Sinclair QL
